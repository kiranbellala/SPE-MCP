 [McpServerToolType]
    public static class SharePointTool
    {
        private static readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = true
        };

        [McpServerTool, Description("Lists SharePoint sites available in the tenant.")]
        public static async Task<string> ListSites([FromServices] GraphServiceClient graphClient)
        {
            try
            {
                var sites = await graphClient.Sites.GetAsync();
                
                if (sites?.Value == null)
                    return "No sites found.";
                    
                return JsonSerializer.Serialize(sites.Value, _jsonOptions);
            }
            catch (Exception ex)
            {
                return $"Error listing SharePoint sites: {ex.Message}";
            }
        }

        [McpServerTool, Description("Lists document libraries in a specific SharePoint site.")]
        public static async Task<string> ListLibraries(
            [FromServices] GraphServiceClient graphClient, 
            [Description("SharePoint site ID")] string siteId)
        {
            try
            {
                var drives = await graphClient.Sites[siteId].Drives.GetAsync();
                
                if (drives?.Value == null)
                    return "No document libraries found.";
                    
                return JsonSerializer.Serialize(drives.Value, _jsonOptions);
            }
            catch (Exception ex)
            {
                return $"Error listing document libraries: {ex.Message}";
            }
        }

        [McpServerTool, Description("Lists contents of a document library or folder in SharePoint.")]
        public static async Task<string> ListContents(
            [FromServices] GraphServiceClient graphClient,
            [Description("Drive ID (document library ID)")] string driveId,
            [Description("Folder path (optional, use root for root folder)")] string folderPath = "root")
        {
            try
            {
                var items = await graphClient.Drives[driveId]
                    .Items[folderPath]
                    .Children
                    .GetAsync();
                    
                if (items?.Value == null)
                    return "No items found.";
                    
                return JsonSerializer.Serialize(items.Value, _jsonOptions);
            }
            catch (Exception ex)
            {
                return $"Error listing contents: {ex.Message}";
            }
        }
    }